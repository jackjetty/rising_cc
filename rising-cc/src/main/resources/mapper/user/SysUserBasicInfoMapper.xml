<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rising.cc.dao.user.SysUserBasicInfoDao">
	
	<resultMap type="SysUserBasicInfo" id="sysUserBasicInfoMap">
		<result property="id" column="id"/>
		<result property="realName" column="realName"/>
		<result property="email" column="email"/>
		<result property="telphone" column="telphone"/>
		<result property="createTime" column="createTime"/>
		<result property="createUser" column="createUser"/>
		
		<result property="sysUser.id" column="userId"/>
		<result property="sysUser.userName" column="userName"/>
		<result property="sysUser.userPwd" column="userPwd"/>
		<result property="sysUser.status" column="status"/>
		<result property="sysUser.isBuilt" column="isBuilt"/>
		<result property="sysUser.note" column="note"/>
		
	</resultMap>
	
	<sql id="columnSysUserBasicInfoByAll">
		u.id as userId,
		u.userName,
		u.userPwd,
		u.status,
		u.isBuilt,
		u.note,
		
		b.id,
		b.realName,
		b.email,
		b.telphone,
		b.createTime,
		b.createUser

	</sql>
	
	<select id="findUserInfoListByPagination" parameterType="Pagination" resultMap="sysUserBasicInfoMap">
		select * from (
			select <include refid="columnSysUserBasicInfoByAll"/>
			 from t_sys_user_basicinfo b inner join t_sys_user u on b.userId = u.id 
			<include refid="common.whereConditionPagination"/>
			<include refid="common.sortConditionPagination"/>
		)
		 t limit 
			<![CDATA[
				#{startIndex} ,#{pageSize}
			]]>
	</select>
	
	<select id="countUserInfoListByPagination" parameterType="Pagination" resultType="Integer">
		select count(1) from t_sys_user_basicinfo b inner join t_sys_user u on b.userId = u.id
		<include refid="common.whereConditionPagination"/>
	</select>
	
	<insert id="saveSysUserBasicInfo" parameterType="SysUserBasicInfo" >
		insert into t_sys_user_basicinfo(userId,
												realName,
												email,
												telphone,
												createTime,
												createUser)
						values(#{sysUser.id,jdbcType=VARCHAR},
									#{realName,jdbcType=VARCHAR},
									#{email,jdbcType=VARCHAR},
									#{telphone,jdbcType=VARCHAR},
									#{createTime,jdbcType=TIMESTAMP},
									#{createUser,jdbcType=VARCHAR})
	</insert>
	
	<update id="updateSysUserBasicInfoByUserId" parameterType="SysUserBasicInfo">
		update t_sys_user_basicinfo 
		<set>
			<if test="realName != null and realName !='' ">
				realName = #{realName,jdbcType=VARCHAR},
			</if>
			<if test="email != null and email !='' ">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="telphone != null and telphone !='' ">
				telphone = #{telphone,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				createTime = #{createTime,jdbcType=INTEGER},
			</if>
			<if test="createUser != null and createUser !='' ">
				createUser = #{note,jdbcType=VARCHAR},
			</if>
		</set>
		where userId = #{sysUser.id,jdbcType=INTEGER}
	</update>
	
	<select id="findSysUserBasicInfoByUserQo" parameterType="BaseQo" resultMap="sysUserBasicInfoMap" >
			select <include refid="columnSysUserBasicInfoByAll"/>
			 from t_sys_user_basicinfo b inner join t_sys_user u on b.userId = u.id
			 <where>
			 	u.status <![CDATA[<>80]]>
			 	<if test="id != null">
			 		and u.id = #{id,jdbcType=INTEGER}
			 	</if>
			 	<if test="userName != null">
			 		and u.userName = #{userName,jdbcType=VARCHAR}
			 	</if>
			 </where>
	</select>
	
</mapper>